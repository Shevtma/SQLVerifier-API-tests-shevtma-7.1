{
	"info": {
		"_postman_id": "7d9313d8-a11b-4f0c-8ad8-87353891a5cf",
		"name": "Change task",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "24525134-7d9313d8-a11b-4f0c-8ad8-87353891a5cf"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.environment.set('token', jsonData.id_token)"
						],
						"type": "text/javascript",
						"id": "22583001-09b6-415e-b5a1-ba8947959fd2"
					}
				}
			],
			"id": "eff7029f-967f-443b-a755-71d9761873b8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "Accept-Language",
						"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
					},
					{
						"key": "Connection",
						"value": "keep-alive"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Origin",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com"
					},
					{
						"key": "Referer",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
					},
					{
						"key": "Sec-Fetch-Dest",
						"value": "empty"
					},
					{
						"key": "Sec-Fetch-Mode",
						"value": "cors"
					},
					{
						"key": "Sec-Fetch-Site",
						"value": "same-origin"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "sec-ch-ua-platform",
						"value": "\"macOS\""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"{{adminLogin}}\",\"password\":\"{{adminPassword}}\",\"rememberMe\":false}"
				},
				"url": {
					"raw": "{{baseUrl}}/authenticate",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "create a task",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0f172d7b-f671-44b2-98b6-5ff0e7676945",
						"exec": [
							"let jsonBody = pm.response.json();",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Status code name is \\\"Created\\\" \", function () {",
							"    pm.response.to.have.status(\"Created\");",
							"});",
							"",
							"pm.test(\"Check for the task text to be \" + pm.environment.get('task_text'), function () {",
							"    pm.expect(jsonBody.text).to.eql(pm.environment.get('task_text'));",
							"});",
							"",
							"pm.test(\"Check for the task answer to be \" + pm.environment.get('task_answer'), function () {",
							"    pm.expect(jsonBody.answer).to.eql(pm.environment.get('task_answer'));",
							"});",
							"",
							"pm.test(\"Check for the task title to be \" + pm.environment.get('task_title'), function () {",
							"    pm.expect(jsonBody.title).to.eql(pm.environment.get('task_title'));",
							"});",
							"",
							"pm.test(\"Response body structure has field \\\"id\\\" of type \\\"number\\\"\", function () {",
							"    pm.expect(jsonBody.id).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Accept header matches \\\"*/*\\\"\", function () {",
							"    pm.expect(pm.response.to.have.header(\"Accept\", \"*/*\"))",
							"});",
							"",
							"pm.test(\"Content-Type header matches \\\"application/json\\\"\", function () {",
							"    pm.expect(pm.response.to.have.header(\"Content-Type\", \"application/json\"))",
							"});",
							"",
							"let moment = require(\"moment\");",
							"let ResponceDateTime = moment(pm.response.headers.get(\"Date\"));",
							"",
							"pm.test(\"Check for the response datetime to be \" + pm.environment.get('CurrDateTime'), function () {",
							"    pm.expect(ResponceDateTime.format(\"DD.MM.YYYY hh:mm Z\")).to.eql(pm.environment.get('CurrDateTime'));",
							"});",
							"",
							"pm.environment.set(\"task_id\", jsonBody.id)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "5310b96f-c775-4de0-bb50-a7282fb595ca",
						"exec": [
							"pm.environment.set(\"task_text\", pm.variables.replaceIn(\"{{$randomLoremSentence}}\"));",
							"pm.environment.set(\"task_answer\", pm.variables.replaceIn(\"{{$randomLoremSentence}}\"));",
							"pm.environment.set(\"task_title\", pm.variables.replaceIn(\"{{$randomLoremWord}}\"));",
							"let moment = require(\"moment\");",
							"pm.environment.set(\"CurrDateTime\", pm.variables.replaceIn(moment().format(\"DD.MM.YYYY hh:mm Z\")))"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "bc0ebae4-40d9-4298-9a64-f0196c78dd05",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"{{task_text}}\",\n  \"answer\": \"{{task_answer}}\",\n  \"title\": \"{{task_title}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "get tasks list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "213206d9-069e-4a6d-913a-3b097a9cb65d",
						"exec": [
							"let jsonBody = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code name is \\\"OK\\\" \", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"pm.test(\"Accept header matches \\\"*/*\\\"\", function () {",
							"    pm.expect(pm.response.to.have.header(\"Accept\", \"*/*\"))",
							"});",
							"",
							"pm.test(\"Content-Type header matches \\\"application/json\\\"\", function () {",
							"    pm.expect(pm.response.to.have.header(\"Content-Type\", \"application/json\"))",
							"});",
							"",
							"pm.test(\"We have a massive of tasks in response\", function () {",
							"    pm.expect(jsonBody.length).not.equals(0);",
							"});",
							"",
							"pm.test(\"We have a block in response with task_id = \"+ pm.environment.get('task_id'), function () {",
							"    let taskId_arr = jsonBody.map((task) => {return task.id});",
							"    pm.expect(taskId_arr.includes(pm.environment.get('task_id'))).to.be.true",
							"});",
							"",
							"let moment = require(\"moment\");",
							"let ResponceDateTime = moment(pm.response.headers.get(\"Date\"));",
							"pm.test(\"Check for the response datetime to be \" + pm.environment.get('CurrDateTime'), function () {",
							"    pm.expect(ResponceDateTime.format(\"DD.MM.YYYY hh:mm Z\")).to.eql(pm.environment.get('CurrDateTime'));",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "9dc97e57-9632-4426-a0a2-54449471d6b8",
						"exec": [
							"let moment = require(\"moment\");",
							"pm.environment.set(\"CurrDateTime\", pm.variables.replaceIn(moment().format(\"DD.MM.YYYY hh:mm Z\")))"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a8768edb-0ccb-4c3b-b344-95c3b32d7d9b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks?page=0&size=200",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "200"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "change task text",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bcac9dbe-ed5e-49d4-924c-85552829c29d",
						"exec": [
							"pm.environment.set(\"new_task_text\", pm.variables.replaceIn(\"{{$randomLoremSentence}}\"));",
							"let moment = require(\"moment\");",
							"pm.environment.set(\"CurrDateTime\", pm.variables.replaceIn(moment().format(\"DD.MM.YYYY hh:mm Z\")))"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f4134202-3a30-4de4-af7f-4e27befa1b7d",
						"exec": [
							"let jsonBody = pm.response.json();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code name is \\\"OK\\\" \", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"pm.test(\"Check for the new task text to be \" + pm.environment.get('new_task_text'), function () {",
							"    pm.expect(jsonBody.text).to.eql(pm.environment.get('new_task_text'));",
							"});",
							"",
							"pm.test(\"Accept header matches \\\"*/*\\\"\", function () {",
							"    pm.expect(pm.response.to.have.header(\"Accept\", \"*/*\"))",
							"});",
							"",
							"pm.test(\"Content-Type header matches \\\"application/json\\\"\", function () {",
							"    pm.expect(pm.response.to.have.header(\"Content-Type\", \"application/json\"))",
							"});",
							"",
							"let moment = require(\"moment\");",
							"let ResponceDateTime = moment(pm.response.headers.get(\"Date\"));",
							"pm.test(\"Check for the response datetime to be \" + pm.environment.get('CurrDateTime'), function () {",
							"    pm.expect(ResponceDateTime.format(\"DD.MM.YYYY hh:mm Z\")).to.eql(pm.environment.get('CurrDateTime'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "c409a9e5-6973-47d5-9533-a09063b384a9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": {{task_id}},\n  \"text\": \"{{new_task_text}}\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks/{{task_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get task data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "07b9d85d-58c6-4328-8a04-340942dc5a57",
						"exec": [
							"let jsonBody = JSON.parse(responseBody);",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Status code name is \\\"OK\\\" \", function () {",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"",
							"pm.test(\"Check for the task text to be \" + pm.environment.get('new_task_text'), function () {",
							"    pm.expect(jsonBody.text).to.eql(pm.environment.get('new_task_text'));",
							"});",
							"",
							"pm.test(\"Check for the task answer to be \" + pm.environment.get('task_answer'), function () {",
							"    pm.expect(jsonBody.answer).to.eql(pm.environment.get('task_answer'));",
							"});",
							"",
							"pm.test(\"Check for the task title to be \" + pm.environment.get('task_title'), function () {",
							"    pm.expect(jsonBody.title).to.eql(pm.environment.get('task_title'));",
							"});",
							"",
							"pm.test(\"Response body structure has field \\\"id\\\" of type \\\"number\\\"\", function () {",
							"    pm.expect(jsonBody.id).to.be.a(\"number\");",
							"});",
							"",
							"pm.test(\"Accept header matches \\\"*/*\\\"\", function () {",
							"    pm.expect(pm.response.to.have.header(\"Accept\", \"*/*\"))",
							"});",
							"",
							"pm.test(\"Content-Type header matches \\\"application/json\\\"\", function () {",
							"    pm.expect(pm.response.to.have.header(\"Content-Type\", \"application/json\"))",
							"});",
							"",
							"let moment = require(\"moment\");",
							"let ResponceDateTime = moment(pm.response.headers.get(\"Date\"));",
							"pm.test(\"Check for the response datetime to be \" + pm.environment.get('CurrDateTime'), function () {",
							"    pm.expect(ResponceDateTime.format(\"DD.MM.YYYY hh:mm Z\")).to.eql(pm.environment.get('CurrDateTime'));",
							"});",
							"",
							"pm.sendRequest(",
							"    {url: pm.environment.get(\"baseUrl\")+'/tasks/'+pm.environment.get(\"task_id\"),",
							"    method: 'DELETE',",
							"    header:",
							"    {'Authorization': 'Bearer ' + pm.environment.get('token'),",
							"    'accept': '*/*'}",
							"    });",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c0a60628-fb32-436e-9aa0-663cfd81e215",
						"exec": [
							"let moment = require(\"moment\");",
							"pm.environment.set(\"CurrDateTime\", pm.variables.replaceIn(moment().format(\"DD.MM.YYYY hh:mm Z\")))"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "9ff34afd-1793-4543-9270-f5e06a56cbcf",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks/{{task_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "2e89ee42-3aef-4d36-88a2-b7d6989be040"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "706f8905-d7f9-46dd-af73-284a891732ef"
			}
		}
	]
}